{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf200
{\fonttbl\f0\fmodern\fcharset0 Courier-Bold;\f1\fmodern\fcharset0 Courier;\f2\fnil\fcharset0 Menlo-Regular;
\f3\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red53\green53\blue53;\red170\green13\blue145;\red255\green255\blue255;
\red0\green0\blue0;\red63\green110\blue116;\red38\green71\blue75;}
{\*\expandedcolortbl;;\cssrgb\c27059\c27059\c27059;\csgenericrgb\c66500\c5200\c56900;\csgray\c100000;
\csgenericrgb\c0\c0\c0;\csgenericrgb\c24700\c43100\c45600;\csgenericrgb\c14900\c27800\c29400;}
\margl1440\margr1440\vieww12560\viewh11280\viewkind0
\deftab560
\pard\pardeftab560\slleading20\partightenfactor0

\f0\b\fs26 \cf2 CS 31 
\f1\b0\fs24 \cf2 \
\pard\pardeftab560\slleading20\partightenfactor0

\f0\b \cf2 \
week 9, monday\
may 30, 2018
\f1\b0 \cf2 \
\
struct Target\
\{\
	public: \
	Target(); 	// a constructor, initializes the object, a member function that is automatically called when an object is created, it should initialize the object to some valid state\
	// void init();\
	bool move(char dir);\
	int position() const; // \'93const member function\'94: a function that promises not to \
						   // modify the object that it\'92s called on\
	void replayHistory();\
\
	private:\
		// Invariant:\
		//		history consists only of Rs and Ls\
		//		pos == number of Rs in history minus number of Ls in history\
	int pos; // data members\
	string history;\
\};\
\
// difference between struct and class: struct is automatically public unless said otherwise, class automatically private unless said otherwise\
\
Target::Target() // constructor, replaces void Target::init()\
\{\
	pos = 0;\
	history = \'93\'94;\
\}\
\
// this can only be used inside member function, a pointer to the object you called your function on\
\
int Target::position()\
\{\
	return pos;\
\}\
\
// Target t;\
// t.position(); // You can\'92t change t.pos from here\
// t.pos; // Users can change this which is BAD\
\
void Target::replayHistory()\
\{\
	for (int k = 0; k != history.size(); k++)\
		cout << history[k] << endl;\
\}\
\
bool Target::move(char dir)\
\{\
	switch(dir)\
	\{\
		case \'91R\'92:\
		case \'91r\'92:\
			pos++;\
			break;\
		case \'91L\'92:\
		case \'91l\'92:\
			pos--;\
			break;\
		default:\
			return false;\
	\}\
	history += toupper(dir);\
	return true;\
\}\
\
void report(const Target& t)\
\{\
	cout << \'93There\'92s a target at position \'93\
		 << t.position() << endl;\
\}\
\
int main()\
\{\
	Target t;\
	t.pos = 0;\
\
	t.pos++;\
	t.history += \'91R\'92;\
	\
	Target t2;\
	t2.pos = 0;\
\
	t2.pos\'97-;\
	t2.history += \'91K\'92;\
\
///////////////////////\
\
	Target t;\
	t.init();\
	\
	t.move(\'91R\'92);\
\
	Target t2;\
	t2.init();\
\
	char ch;\
	cin >> ch;\
	if (! t2.move(ch))\
		...error...\
\
	t2.pos--; // WON\'92T COMPILE! Not inside member function of target, this function has no access to private members of target\
\}\
\
\
a pointer to			the name of\
an object of     ->    a member of			p->m means(*p).m\
 some struct			that type\
	type				\
\
the name of				the name of\
some struct     ::     a member of\
  type					that type\
\
\
\
Target t;\
...\
...\
...\
...\
t.init();\
// in that time, target is not in a valid state\
\
int* a = new int; // Dynamically allocates a new int\
\
void makeTarget()\
\{\
	Target t; // Bad because t will disappear when makeTarget returns\
\}\
\
Target* makeTarget()\
\{\
	Target* t = new Target; // allocate memory to a new target. It persists after makeTarget() returns\
	t->move(\'91L\'92);\
	return t; // the target\'92s position stays changed, will lose the variable t but will still have the target that you created\
\}\
\
int main()\
\{\
	Target* u = makeTarget(); // u.position() returns -1\
	Target* v = makeTarget(); // v.position() returns -1\
	v->move(\'91R\'92);\
	// u.position() returns -1\
	// v.position() returns 0\
	// (You don\'92t need to do the following because you\'92re in the main routine)\
	// If you use makeTarget() a lot, you may run out of memory\
	// Make sure you delete the Targets when you\'92re done with them\
	delete u; // Call delete on the pointer\
	delete v;\
	// u and v are now both dangling pointers\
\}\
\
int main()\
\{\
	Target targets[100]; // array is storing pointers to the newly created Target items\
	int nTargets = 0;\
	...\
	target[nTargets] = new Target; // after new, put the type of object you want, tells operating system to give memory large enough to hold that object\
	nTargets++;\
	...\
	target[nTargets] = new Target;\
	nTargets++;\
	...\
	target[nTargets] = new Target; \
	nTargets++;\
	...\
	int i;\
	...... something gives i a value, say 1\
	targets[i]->move(\'91R\'92);\
	// if this had not been a main function, all local variables (array, int nTargets, etc) would go away, but the targets we made by using \'93new Target\'94 would not go away. We no longer have access to these targets (but they\'92re still there) that we made since the pointers we made to these target objects were local variables and went away\
	// if this runs a bunch of times, a \'93memory leak\'94 occurs because we have all these targets in memory but no way to access them, eventually run out of memory\
\
	...\
	delete targets[1]; // deletes the object that the pointer held the address to, does not change the pointer, if you followed that behavior then UNDEFINED BEHAVIOR\
	targets[1] = targets[2];\
\
	nTargets--;\
\
	...\
	for (int k = 0; k < nTargets; k++)\
		delete targets[k]; 		// delete local objects, can leave function\
\}\
\
\
\
\
class Pet\
\{\
	public:\
	 Pet(string nm, int h);	\
	 string name() const; // Strictly an accessor; it won\'92t change data members\
	// If name() changed m_name to something else, then you run into a compile error\
	 ...\
	private:\
	 string m_name;\
	 int m_health;\
\};\
\
Pet::Pet(string name, int health) // constructor stuffs name and health into \
									// appropriate data members\
\{\
	m_name = nm;\
	m_health = h;\
\}\
\
string Pet::name() const\
\{\
	return m_name;\
\}\
\
\
void f()\
\{\
	Pet p(\'93Fido\'94, 10);\
	// p.name() returns Fido\
	// p.m_health is 10 (you can\'92t access it)y\
\}\
\
\
\
\

\f0\b \cf2 week 9, friday\
june 1, 2018
\f1\b0 \cf2 \
\
struct Point \{\
private:\
	int x = 1;\
	double y = 2.0;\
public:\
	int getX()\{\
		return x;\
	\}\
	int getY() \{\
		return y;\
	\}\
	void setX(int a) \{\
		x = a;\
	\}\
\} p1, p2, p3; // declares object of Point, can access in the main\
\
class Pointnew1 \{\
	Pointnew1(int c, int d) \{\
		cout << \'93Constructor invoked\'94 << endl;\
		x = c;\
		y = d;\
	\}\
	Pointnew1()\
	~Pointnew1()		// destructor!!! get rid of all memory allocations related to your \
					// object\
private:\
	int x = 5;\
	int y = 3;\
public:\
	int add() \{\
		return x + y;\
	\}\
	void setX(int a) \{\
		x = a;\
	\}\
\};\
\
int main()\
\{\
	Pointnew1 p1; // unnecessary now\
	cout << p1.getX() << \'93, \'93 << p1.getY() << endl;\
	Pointnew1* p3 = new Pointnew1;		// creates a new object and returns a pointer to that object, destructor destroys the pointer and delete destroys what the pointer points to\
	cout << p3.add() << end;\
	p3->setX(2);\
	Pointnew1* p4 = new Pointnew1(5, 10);\
	Pointnew1 p5(2,4); // parameterized constructor\
	Pointnew1* p6 = &p5; \
	Pointnew1* p7 = new Pointnew1(); // default constructor\
	cout << p7->add() << endl; // garbage values bc not initialized in default constructor\
\
	delete p7;	// stop holding onto memory for whatever the pointer points to, creates a dangling pointer that still exists\
	p7->add(); // compile error\
\}\
\
// Things created at compile time are deleted for you\
// Things you dynamically allocate (objects, created at run time) must be deleted yourself\
\
const member function: \
will not modify the object\
will not call any non-const member functions\
compile errors: if any of the above occur\
const object cannot be passed to regular (non const) class functions, can only be passed to const functions\
\
\
\
array of objects\
point* arr[2];\
arr[0] = new point(10, 20);\
arr[1] = new point(20, 30);\
pet arr[10];\
\
\
\
passing an array of object to a function\
void change1(myclass* p[], int n)\
\{\
	for (int i = 0; i < n; i++)\
		cout << p[i]->x << endl;\
\}\
\
int main()\
\{\
	myclass* arr[2];\
	arr[0] = new point(10, 20);\
	arr[1] = new point(20, 30);\
	change1(arr, 2);\
\}\
\
\
\
\
\pard\tx543\pardeftab543\pardirnatural\partightenfactor0

\f2\fs22 \cf3 \cb4 struct\cf5  Point
\f3\fs24 \cf0 \

\f2\fs22 \cf5 \{
\f3\fs24 \cf0 \

\f2\fs22 \cf5     Point(\cf3 int\cf5  a);
\f3\fs24 \cf0 \

\f2\fs22 \cf5     Point();
\f3\fs24 \cf0 \

\f2\fs22 \cf5     \cf3 int\cf5  num;
\f3\fs24 \cf0 \

\f2\fs22 \cf5 \};
\f3\fs24 \cf0 \
\

\f2\fs22 \cf6 Point\cf5 ::Point()
\f3\fs24 \cf0  
\f2\fs22 \cf5 \{\}
\f3\fs24 \cf0 \
\

\f2\fs22 \cf6 Point\cf5 ::Point(\cf3 int\cf5  a)
\f3\fs24 \cf0 \

\f2\fs22 \cf5 \{
\f3\fs24 \cf0 \

\f2\fs22 \cf5     \cf6 num\cf5  = a;
\f3\fs24 \cf0 \

\f2\fs22 \cf5 \}
\f3\fs24 \cf0 \
\

\f2\fs22 \cf6 Point\cf5  apple()
\f3\fs24 \cf0 \

\f2\fs22 \cf5 \{
\f3\fs24 \cf0 \

\f2\fs22 \cf5     \cf3 return\cf5  \cf6 Point(5)\cf5 ; // You need access to this Point object. Otherwise if you lose access to it, you can\'92t get rid of it until your program ends
\f3\fs24 \cf0 \

\f2\fs22 \cf5 \}
\f3\fs24 \cf0 \
\

\f2\fs22 \cf3 int\cf5  main()
\f3\fs24 \cf0 \

\f2\fs22 \cf5 \{
\f3\fs24 \cf0 \

\f2\fs22 \cf5     \cf6 Point\cf5  a = \cf7 apple\cf5 ();
\f3\fs24 \cf0 \

\f2\fs22 \cf5 \}
\f3\fs24 \cf0 \
\pard\pardeftab560\slleading20\partightenfactor0

\f1 \cf2 \cb1 \
\
\
\
\
\
\
\
\
\
\
}